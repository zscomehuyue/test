sql查询操作案例

奋斗的小小伟 2019-02-12 11:00:34  166  收藏
问题及描述：
1.学生表
student(sid,sname,sage,ssex) --sid 学生编号,sname 学生姓名,sage 出生年月,ssex 学生性别
2.课程表
course(cid,cname,tid) --cid --课程编号,cname 课程名称,tid 教师编号
3.教师表
teacher(tid,tname) --tid 教师编号,tname 教师姓名
4.成绩表
sc(sid,cid,score) --sid 学生编号,cid 课程编号,score 分数

创建测试数据
create table student(sid varchar(10),sname varchar(10),sage TIMESTAMP,ssex varchar(10));
insert into student values(‘01’ , ‘赵雷’ , ‘1990-01-01’ , ‘男’);
insert into student values(‘02’ , ‘钱电’ , ‘1990-12-21’ , ‘男’);
insert into student values(‘03’ , ‘孙风’ , ‘1990-05-20’ , ‘男’);
insert into student values(‘04’ , ‘李云’ , ‘1990-08-06’ , ‘男’);
insert into student values(‘05’ , ‘周梅’ , ‘1991-12-01’ , ‘女’);
insert into student values(‘06’ , ‘吴兰’ , ‘1992-03-01’ , ‘女’);
insert into student values(‘07’ , ‘郑竹’ , ‘1989-07-01’ , ‘女’);
insert into student values(‘08’ , ‘王菊’ , ‘1990-01-20’ , ‘女’);
create table course(cid varchar(10),cname varchar(10),tid varchar(10));
insert into course values(‘01’ , ‘语文’ , ‘02’);
insert into course values(‘02’ , ‘数学’ , ‘01’);
insert into course values(‘03’ , ‘英语’ , ‘03’);
create table teacher(tid varchar(10),tname varchar(10));
insert into teacher values(‘01’ , ‘张三’);
insert into teacher values(‘02’ , ‘李四’);
insert into teacher values(‘03’ , ‘王五’);
create table sc(sid varchar(10),cid varchar(10),score decimal(18,1));
insert into sc values(‘01’ , ‘01’ , 80);
insert into sc values(‘01’ , ‘02’ , 90);
insert into sc values(‘01’ , ‘03’ , 99);
insert into sc values(‘02’ , ‘01’ , 70);
insert into sc values(‘02’ , ‘02’ , 60);
insert into sc values(‘02’ , ‘03’ , 80);
insert into sc values(‘03’ , ‘01’ , 80);
insert into sc values(‘03’ , ‘02’ , 80);
insert into sc values(‘03’ , ‘03’ , 80);
insert into sc values(‘04’ , ‘01’ , 50);
insert into sc values(‘04’ , ‘02’ , 30);
insert into sc values(‘04’ , ‘03’ , 20);
insert into sc values(‘05’ , ‘01’ , 76);
insert into sc values(‘05’ , ‘02’ , 87);
insert into sc values(‘06’ , ‘01’ , 31);
insert into sc values(‘06’ , ‘03’ , 34);
insert into sc values(‘07’ , ‘02’ , 89);
insert into sc values(‘07’ , ‘03’ , 98);

1、查询"01"课程比"02"课程成绩高的学生的信息及课程分数
1.1、查询同时存在"01"课程和"02"课程的情况
select a.* , b.score 课程01的分数,c.score 课程02的分数 from student a , sc b , sc c
where a.sid = b.sid and a.sid = c.sid and b.cid = ‘01’ and c.cid = ‘02’ and b.score > c.score

1.2、查询同时存在"01"课程和"02"课程的情况和存在"01"课程但可能不存在"02"课程的情况(不存在时显示为null)(以下存在相同内容时不再解释)
select a.* , b.score 课程01的分数,c.score 课程02的分数 from student a
left join sc b on a.sid = b.sid and b.cid = ‘01’
left join sc c on a.sid = c.sid and c.cid = ‘02’

where b.score > isnull(c.score,0)

方法1.1 sql 解析（基于 mysql 数据库，方法 1.2 不是mysql 数据库，mysql 数据库里面没有 isnull 函数）查询流程如下：
在这里插入图片描述

2、查询"01"课程比"02"课程成绩低的学生的信息及课程分数
2.1、查询同时存在"01"课程和"02"课程的情况
select a.* , b.score 课程01的分数 ,c.score 课程02的分数 from student a , sc b , sc c
where a.sid = b.sid and a.sid = c.sid and b.cid = ‘01’ and c.cid = ‘02’ and b.score < c.score

2.2、查询同时存在"01"课程和"02"课程的情况和不存在"01"课程但存在"02"课程的情况
select a.* , b.score 课程01的分数 ,c.score 课程02的分数 from student a
left join sc b on a.sid = b.sid and b.cid = ‘01’
left join sc c on a.sid = c.sid and c.cid = ‘02’
where isnull(b.score,0) < c.score

3、查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩
select a.sid , a.sname , cast(avg(b.score) as decimal(18,2)) avg_score
from student a , sc b
where a.sid = b.sid
group by a.sid , a.sname
having cast(avg(b.score) as decimal(18,2)) >= 60
order by a.sid

4、查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩
4.1、查询在sc表存在成绩的学生信息的sql语句。
select a.sid , a.sname , cast(avg(b.score) as decimal(18,2)) avg_score
from student a , sc b
where a.sid = b.sid
group by a.sid , a.sname
having cast(avg(b.score) as decimal(18,2)) < 60
order by a.sid

4.2、查询在sc表中不存在成绩的学生信息的sql语句。
select a.sid , a.sname , isnull(cast(avg(b.score) as decimal(18,2)),0) avg_score
from student a left join sc b
on a.sid = b.sid
group by a.sid , a.sname
having isnull(cast(avg(b.score) as decimal(18,2)),0) < 60
order by a.sid

5、查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩
5.1、查询所有有成绩的sql。
select a.sid 学生编号 , a.sname 学生姓名 , count(b.cid) 选课总数, sum(score) 所有课程的总成绩
from student a , sc b
where a.sid = b.sid
group by a.sid,a.sname
order by a.sid

5.2、查询所有(包括有成绩和无成绩)的sql。
select a.sid 学生编号 , a.sname 学生姓名 , count(b.cid) 选课总数, sum(score) 所有课程的总成绩
from student a left join sc b
on a.sid = b.sid
group by a.sid,a.sname
order by a.sid

6、查询"李"姓老师的数量
方法1
select count(tname) 李姓老师的数量 from teacher where tname like ‘李%’

方法2
select count(tname) 李姓老师的数量 from teacher where left(tname,1) = ‘李’

7、查询学过"张三"老师授课的同学的信息
select distinct student.* from student , sc , course , teacher
where student.sid = sc.sid and sc.cid = course.cid and course.tid = teacher.tid and teacher.tname = ‘张三’
order by student.sid

8、查询没学过"张三"老师授课的同学的信息
select m.* from student m where sid not in (select distinct sc.sid from sc , course , teacher where sc.cid = course.cid and course.tid = teacher.tid and teacher.tname = ‘张三’) order by m.sid

9、查询学过编号为"01"并且也学过编号为"02"的课程的同学的信息
方法1
select student.* from student , sc where student.sid = sc.sid and sc.cid = ‘01’ and exists (select 1 from sc sc_2 where sc_2.sid = sc.sid and sc_2.cid = ‘02’) order by student.sid

方法2
select student.* from student , sc where student.sid = sc.sid and sc.cid = ‘02’ and exists (select 1 from sc sc_2 where sc_2.sid = sc.sid and sc_2.cid = ‘01’) order by student.sid

方法1的讲解：这里的 select 1 只是查看这个子查询有没有查询记录，而并不关心查询到什么，这个 1 可以换成 * 或者某个字段，因为这个 select 子查询是在 exists 条件下的，所以和 exists 结合后，只会返回 true 或者 false ，如果返回true ，则外查询的记录被录入到结果集中，如果 exists 的结果返回 false ，则外查询的结果不被放入结果集中

这里的子查询中，sc_2 与外查询的 sc 进行关联查询，由于在外查询中，筛选过一次：sc.cid=‘01’ 选出了有选 ‘01’ 课程的同学，但是这些记录里面既有包含同时选’02’ 课程的同学，也包含选其他课程的同学，所以用 exists+子查询的方式判断外查询里面的记录是否满足子查询的条件（也就是这些外查询记录必须是包含选过课程’02’的同学），如果满足，外查询的这条记录放入结果集，否则舍弃，这里外查询中是 student 和 sc 其实已经是一个新表了
exists 是把外查询的每一条记录都与子查询的结果集进行比对，若满足子查询的条件，exists 返回true，外查询的该条记录放入结果集，否则舍弃该条记录

方法3
select m.* from student m where sid in
(
select sid from
(
select distinct sid from sc where cid = ‘01’
union all
select distinct sid from sc where cid = ‘02’
) t group by sid having count(1) = 2
)
order by m.sid

10、查询学过编号为"01"但是没有学过编号为"02"的课程的同学的信息
方法1
select student.* from student , sc where student.sid = sc.sid and sc.cid = ‘01’ and not exists (select 1 from sc sc_2 where sc_2.sid = sc.sid and sc_2.cid = ‘02’) order by student.sid

方法2
select student.* from student , sc where student.sid = sc.sid and sc.cid = ‘01’ and student.sid not in (select sc_2.sid from sc sc_2 where sc_2.sid = sc.sid and sc_2.cid = ‘02’) order by student.sid

11、查询没有学全所有课程的同学的信息
11.1、
select student.*
from student , sc
where student.sid = sc.sid
group by student.sid , student.sname , student.sage , student.ssex having count(cid) < (select count(cid) from course)

11.2
select student.*
from student left join sc
on student.sid = sc.sid
group by student.sid , student.sname , student.sage , student.ssex having count(cid) < (select count(cid) from course)

12、查询至少有一门课与学号为"01"的同学所学相同的同学的信息
select distinct student.* from student , sc where student.sid = sc.sid and sc.cid in (select cid from sc where sid = ‘01’) and student.sid <> ‘01’

13、查询和"01"号的同学学习的课程完全相同的其他同学的信息
select student.* from student where sid in
(select distinct sc.sid from sc where sid <> ‘01’ and sc.cid in (select distinct cid from sc where sid = ‘01’)
group by sc.sid having count(1) = (select count(1) from sc where sid=‘01’))

14、查询没学过"张三"老师讲授的任一门课程的学生姓名
select student.* from student where student.sid not in
(select distinct sc.sid from sc , course , teacher where sc.cid = course.cid and course.tid = teacher.tid and teacher.tname = ‘张三’)
order by student.sid

15、查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩
select student.sid , student.sname , cast(avg(score) as decimal(18,2)) avg_score from student , sc
where student.sid = sc.sid and student.sid in (select sid from sc where score < 60 group by sid having count(1) >= 2)
group by student.sid , student.sname

16、检索"01"课程分数小于60，按分数降序排列的学生信息
select student.* , sc.cid , sc.score from student , sc
where student.sid = sc.sid and sc.score < 60 and sc.cid = ‘01’
order by sc.score desc

17、按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩
17.1 sql 2000 静态
select a.sid 学生编号 , a.sname 学生姓名 ,
max(case c.cname when ‘语文’ then b.score else null end) 语文 ,
max(case c.cname when ‘数学’ then b.score else null end) 数学 ,
max(case c.cname when ‘英语’ then b.score else null end) 英语 ,
cast(avg(b.score) as decimal(18,2)) 平均分
from student a
left join sc b on a.sid = b.sid
left join course c on b.cid = c.cid
group by a.sid , a.sname
order by 平均分 desc

max 等这些聚合函数是在 group by 之后才进行计算的

17.2 sql 2000 动态
declare @sql varchar(4000)
set @sql = ‘select a.sid ’ + ‘学生编号’ + ’ , a.sname ’ + ‘学生姓名’
select @sql = @sql + ‘,max(case c.cname when ‘’’+cname+’’’ then b.score else null end) ‘+cname+’ ’
from (select distinct cname from course) as t
set @sql = @sql + ’ , cast(avg(b.score) as decimal(18,2)) ’ + ‘平均分’ + ’ from student a left join sc b on a.sid = b.sid left join course c on b.cid = c.cid
group by a.sid , a.sname order by ’ + ‘平均分’ + ’ desc’
exec(@sql)

18、查询各科成绩最高分、最低分和平均分：以如下形式显示：课程id，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率
及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90

方法1
select m.cid 课程编号 , m.cname 课程名称 ,
max(n.score) 最高分 ,
min(n.score) 最低分 ,
cast(avg(n.score) as decimal(18,2)) 平均分 ,
cast((select count(1) from sc where cid = m.cid and score >= 60)*100.0 / (select count(1) from sc where cid = m.cid) as decimal(18,2)) 及格率 ,
cast((select count(1) from sc where cid = m.cid and score >= 70 and score < 80 )*100.0 / (select count(1) from sc where cid = m.cid) as decimal(18,2)) 中等率 ,
cast((select count(1) from sc where cid = m.cid and score >= 80 and score < 90 )*100.0 / (select count(1) from sc where cid = m.cid) as decimal(18,2)) 优良率 ,
cast((select count(1) from sc where cid = m.cid and score >= 90)*100.0 / (select count(1) from sc where cid = m.cid) as decimal(18,2)) 优秀率
from course m , sc n
where m.cid = n.cid
group by m.cid , m.cname
order by m.cid

方法2
select m.cid 课程编号 , m.cname 课程名称 ,
(select max(score) from sc where cid = m.cid) 最高分 ,
(select min(score) from sc where cid = m.cid) 最低分 ,
(select cast(avg(score) as decimal(18,2)) from sc where cid = m.cid) 平均分 ,
cast((select count(1) from sc where cid = m.cid and score >= 60)*100.0 / (select count(1) from sc where cid = m.cid) as decimal(18,2)) 及格率,
cast((select count(1) from sc where cid = m.cid and score >= 70 and score < 80 )*100.0 / (select count(1) from sc where cid = m.cid) as decimal(18,2)) 中等率 ,
cast((select count(1) from sc where cid = m.cid and score >= 80 and score < 90 )*100.0 / (select count(1) from sc where cid = m.cid) as decimal(18,2)) 优良率 ,
cast((select count(1) from sc where cid = m.cid and score >= 90)*100.0 / (select count(1) from sc where cid = m.cid) as decimal(18,2)) 优秀率
from course m
order by m.cid

19、按各科成绩进行排序，并显示排名
19.1 sql 2000用子查询完成
score重复时保留名次空缺
select t.* , px = (select count(1) from sc where cid = t.cid and score > t.score) + 1 from sc t order by t.cid , px

score重复时合并名次
select t.* , px = (select count(distinct score) from sc where cid = t.cid and score >= t.score) from sc t order by t.cid , px

19.2 sql 2005用rank,dense_rank完成
score重复时保留名次空缺(rank完成)
select t.* , px = rank() over(partition by cid order by score desc) from sc t order by t.cid , px

score重复时合并名次(dense_rank完成)
select t.* , px = dense_rank() over(partition by cid order by score desc) from sc t order by t.cid , px

20、查询学生的总成绩并进行排名
20.1 查询学生的总成绩
select m.sid 学生编号 ,
m.sname 学生姓名 ,
isnull(sum(score),0) 总成绩
from student m left join sc n on m.sid = n.sid
group by m.sid , m.sname
order by 总成绩 desc

20.2 查询学生的总成绩并进行排名，sql 2000用子查询完成，分总分重复时保留名次空缺和不保留名次空缺两种。
select t1.* , px = (select count(1) from
(
select m.sid 学生编号 ,
m.sname 学生姓名 ,
isnull(sum(score),0) 总成绩
from student m left join sc n on m.sid = n.sid
group by m.sid , m.sname
) t2 where 总成绩 > t1.总成绩) + 1 from
(
select m.sid 学生编号 ,
m.sname 学生姓名 ,
isnull(sum(score),0) 总成绩
from student m left join sc n on m.sid = n.sid
group by m.sid , m.sname
) t1
order by px

select t1.* , px = (select count(distinct 总成绩) from
(
select m.sid 学生编号 ,
m.sname 学生姓名 ,
isnull(sum(score),0) 总成绩
from student m left join sc n on m.sid = n.sid
group by m.sid , m.sname
) t2 where 总成绩 >= t1.总成绩) from
(
select m.sid 学生编号 ,
m.sname 学生姓名 ,
isnull(sum(score),0) 总成绩
from student m left join sc n on m.sid = n.sid
group by m.sid , m.sname
) t1
order by px

20.3 查询学生的总成绩并进行排名，sql 2005用rank,dense_rank完成，分总分重复时保留名次空缺和不保留名次空缺两种。
select t.* , px = rank() over(order by 总成绩 desc) from
(
select m.sid 学生编号 ,
m.sname 学生姓名 ,
isnull(sum(score),0) 总成绩
from student m left join sc n on m.sid = n.sid
group by m.sid , m.sname
) t
order by px

select t.* , px = dense_rank() over(order by 总成绩 desc) from
(
select m.sid 学生编号 ,
m.sname 学生姓名 ,
isnull(sum(score),0) 总成绩
from student m left join sc n on m.sid = n.sid
group by m.sid , m.sname
) t
order by px

21、查询不同老师所教不同课程平均分从高到低显示
select m.tid , m.tname , cast(avg(o.score) as decimal(18,2)) avg_score
from teacher m , course n , sc o
where m.tid = n.tid and n.cid = o.cid
group by m.tid , m.tname
order by avg_score desc

22、查询所有课程的成绩第2名到第3名的学生信息及该课程成绩
22.1 sql 2000用子查询完成
score重复时保留名次空缺
select * from (select t.* , px = (select count(1) from sc where cid = t.cid and score > t.score) + 1 from sc t) m where px between 2 and 3 order by m.cid , m.px

score重复时合并名次
select * from (select t.* , px = (select count(distinct score) from sc where cid = t.cid and score >= t.score) from sc t) m where px between 2 and 3 order by m.cid , m.px

22.2 sql 2005用rank,dense_rank完成
score重复时保留名次空缺(rank完成)
select * from (select t.* , px = rank() over(partition by cid order by score desc) from sc t) m where px between 2 and 3 order by m.cid , m.px

score重复时合并名次(dense_rank完成)
select * from (select t.* , px = dense_rank() over(partition by cid order by score desc) from sc t) m where px between 2 and 3 order by m.cid , m.px

23、统计各科成绩各分数段人数：课程编号,课程名称, 100-85 , 85-70 , 70-60 , 0-60 及所占百分比
23.1 统计各科成绩各分数段人数：课程编号,课程名称, 100-85 , 85-70 , 70-60 , 0-60
横向显示
select course.cid 课程编号 , cname as 课程名称 ,
sum(case when score >= 85 then 1 else 0 end) 85-100 ,
sum(case when score >= 70 and score < 85 then 1 else 0 end) 70-85 ,
sum(case when score >= 60 and score < 70 then 1 else 0 end) 60-70 ,
sum(case when score < 60 then 1 else 0 end) 0-60
from sc , course
where sc.cid = course.cid
group by course.cid , course.cname
order by course.cid

纵向显示1(显示存在的分数段)
select m.cid 课程编号 , m.cname 课程名称 , 分数段 = (
case when n.score >= 85 then ‘85-100’
when n.score >= 70 and n.score < 85 then ‘70-85’
when n.score >= 60 and n.score < 70 then ‘60-70’
else ‘0-60’
end) ,
count(1) 数量
from course m , sc n
where m.cid = n.cid
group by m.cid , m.cname , (
case when n.score >= 85 then ‘85-100’
when n.score >= 70 and n.score < 85 then ‘70-85’
when n.score >= 60 and n.score < 70 then ‘60-70’
else ‘0-60’
end)
order by m.cid , m.cname , 分数段

纵向显示2(显示存在的分数段，不存在的分数段用0显示)
select m.cid 课程编号 , m.cname 课程名称 , 分数段 = (
case when n.score >= 85 then ‘85-100’
when n.score >= 70 and n.score < 85 then ‘70-85’
when n.score >= 60 and n.score < 70 then ‘60-70’
else ‘0-60’
end) ,
count(1) 数量
from course m , sc n
where m.cid = n.cid
group by all m.cid , m.cname , (
case when n.score >= 85 then ‘85-100’
when n.score >= 70 and n.score < 85 then ‘70-85’
when n.score >= 60 and n.score < 70 then ‘60-70’
else ‘0-60’
end)
order by m.cid , m.cname , 分数段

23.2 统计各科成绩各分数段人数：课程编号,课程名称, 100-85 , 85-70 , 70-60 , <60 及所占百分比
横向显示
select m.cid 课程编号, m.cname 课程名称,
(select count(1) from sc where cid = m.cid and score < 60) 0-60 ,
cast((select count(1) from sc where cid = m.cid and score < 60)*100.0 / (select count(1) from sc where cid = m.cid) as decimal(18,2)) 百分比 ,
(select count(1) from sc where cid = m.cid and score >= 60 and score < 70) 60-70 ,
cast((select count(1) from sc where cid = m.cid and score >= 60 and score < 70)*100.0 / (select count(1) from sc where cid = m.cid) as decimal(18,2)) 百分比 ,
(select count(1) from sc where cid = m.cid and score >= 70 and score < 85) 70-85 ,
cast((select count(1) from sc where cid = m.cid and score >= 70 and score < 85)*100.0 / (select count(1) from sc where cid = m.cid) as decimal(18,2)) 百分比 ,
(select count(1) from sc where cid = m.cid and score >= 85) 85-100 ,
cast((select count(1) from sc where cid = m.cid and score >= 85)*100.0 / (select count(1) from sc where cid = m.cid) as decimal(18,2)) 百分比
from course m
order by m.cid

纵向显示1(显示存在的分数段)
select m.cid 课程编号 , m.cname 课程名称 , 分数段 = (
case when n.score >= 85 then ‘85-100’
when n.score >= 70 and n.score < 85 then ‘70-85’
when n.score >= 60 and n.score < 70 then ‘60-70’
else ‘0-60’
end) ,
count(1) 数量 ,
cast(count(1) * 100.0 / (select count(1) from sc where cid = m.cid) as decimal(18,2)) 百分比
from course m , sc n
where m.cid = n.cid
group by m.cid , m.cname , (
case when n.score >= 85 then ‘85-100’
when n.score >= 70 and n.score < 85 then ‘70-85’
when n.score >= 60 and n.score < 70 then ‘60-70’
else ‘0-60’
end)
order by m.cid , m.cname , 分数段

纵向显示2(显示存在的分数段，不存在的分数段用0显示)
select m.cid 课程编号 , m.cname 课程名称 , 分数段 = (
case when n.score >= 85 then ‘85-100’
when n.score >= 70 and n.score < 85 then ‘70-85’
when n.score >= 60 and n.score < 70 then ‘60-70’
else ‘0-60’
end) ,
count(1) 数量 ,
cast(count(1) * 100.0 / (select count(1) from sc where cid = m.cid) as decimal(18,2)) 百分比
from course m , sc n
where m.cid = n.cid
group by all m.cid , m.cname , (
case when n.score >= 85 then ‘85-100’
when n.score >= 70 and n.score < 85 then ‘70-85’
when n.score >= 60 and n.score < 70 then ‘60-70’
else ‘0-60’
end)
order by m.cid , m.cname , 分数段

24、查询学生平均成绩及其名次
24.1 查询学生的平均成绩并进行排名，sql 2000用子查询完成，分平均成绩重复时保留名次空缺和不保留名次空缺两种。
select t1.* , px = (select count(1) from
(
select m.sid 学生编号 ,
m.sname 学生姓名 ,
isnull(cast(avg(score) as decimal(18,2)),0) 平均成绩
from student m left join sc n on m.sid = n.sid
group by m.sid , m.sname
) t2 where 平均成绩 > t1.平均成绩) + 1 from
(
select m.sid 学生编号 ,
m.sname 学生姓名 ,
isnull(cast(avg(score) as decimal(18,2)),0) 平均成绩
from student m left join sc n on m.sid = n.sid
group by m.sid , m.sname
) t1
order by px

select t1.* , px = (select count(distinct 平均成绩) from
(
select m.sid 学生编号 ,
m.sname 学生姓名 ,
isnull(cast(avg(score) as decimal(18,2)),0) 平均成绩
from student m left join sc n on m.sid = n.sid
group by m.sid , m.sname
) t2 where 平均成绩 >= t1.平均成绩) from
(
select m.sid 学生编号 ,
m.sname 学生姓名 ,
isnull(cast(avg(score) as decimal(18,2)),0) 平均成绩
from student m left join sc n on m.sid = n.sid
group by m.sid , m.sname
) t1
order by px

24.2 查询学生的平均成绩并进行排名，sql 2005用rank,dense_rank完成，分平均成绩重复时保留名次空缺和不保留名次空缺两种。
select t.* , px = rank() over(order by 平均成绩 desc) from
(
select m.sid 学生编号 ,
m.sname 学生姓名 ,
isnull(cast(avg(score) as decimal(18,2)),0) 平均成绩
from student m left join sc n on m.sid = n.sid
group by m.sid , m.sname
) t
order by px

select t.* , px = dense_rank() over(order by 平均成绩 desc) from
(
select m.sid 学生编号 ,
m.sname 学生姓名 ,
isnull(cast(avg(score) as decimal(18,2)),0) 平均成绩
from student m left join sc n on m.sid = n.sid
group by m.sid , m.sname
) t
order by px

25、查询各科成绩前三名的记录
25.1 分数重复时保留名次空缺
select m.* , n.cid , n.score from student m, sc n where m.sid = n.sid and n.score in
(select top 3 score from sc where cid = n.cid order by score desc) order by n.cid , n.score desc

25.2 分数重复时不保留名次空缺，合并名次
sql 2000用子查询实现
select * from (select t.* , px = (select count(distinct score) from sc where cid = t.cid and score >= t.score) from sc t) m where px between 1 and 3 order by m.cid , m.px

sql 2005用dense_rank实现
select * from (select t.* , px = dense_rank() over(partition by cid order by score desc) from sc t) m where px between 1 and 3 order by m.cid , m.px

26、查询每门课程被选修的学生数
select cid , count(sid) 学生数 from sc group by cid

27、查询出只有两门课程的全部学生的学号和姓名
select student.sid , student.sname
from student , sc
where student.sid = sc.sid
group by student.sid , student.sname
having count(sc.cid) = 2
order by student.sid

28、查询男生、女生人数
select count(ssex) as 男生人数 from student where ssex = n’男’
select count(ssex) as 女生人数 from student where ssex = n’女’
select sum(case when ssex = n’男’ then 1 else 0 end) 男生人数 ,sum(case when ssex = n’女’ then 1 else 0 end) 女生人数 from student
select case when ssex = n’男’ then n’男生人数’ else n’女生人数’ end 男女情况 , count(1) 人数 from student group by case when ssex = n’男’ then n’男生人数’ else n’女生人数’ end

29、查询名字中含有"风"字的学生信息
select * from student where sname like n’%风%’
select * from student where charindex(n’风’ , sname) > 0

30、查询同名同性学生名单，并统计同名人数
select sname 学生姓名 , count() 人数 from student group by sname having count() > 1

31、查询1990年出生的学生名单(注：student表中sage列的类型是datetime)
select * from student where year(sage) = 1990
select * from student where datediff(yy,sage,‘1990-01-01’) = 0
select * from student where datepart(yy,sage) = 1990
select * from student where convert(varchar(4),sage,120) = ‘1990’

32、查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列
select m.cid , m.cname , cast(avg(n.score) as decimal(18,2)) avg_score
from course m, sc n
where m.cid = n.cid
group by m.cid , m.cname
order by avg_score desc, m.cid asc

33、查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩
select a.sid , a.sname , cast(avg(b.score) as decimal(18,2)) avg_score
from student a , sc b
where a.sid = b.sid
group by a.sid , a.sname
having cast(avg(b.score) as decimal(18,2)) >= 85
order by a.sid

34、查询课程名称为"数学"，且分数低于60的学生姓名和分数
select sname , score
from student , sc , course
where sc.sid = student.sid and sc.cid = course.cid and course.cname = n’数学’ and score < 60

35、查询所有学生的课程及分数情况；
select student.* , course.cname , sc.cid , sc.score
from student, sc , course
where student.sid = sc.sid and sc.cid = course.cid
order by student.sid , sc.cid

36、查询任何一门课程成绩在70分以上的姓名、课程名称和分数；
select student.* , course.cname , sc.cid , sc.score
from student, sc , course
where student.sid = sc.sid and sc.cid = course.cid and sc.score >= 70
order by student.sid , sc.cid

37、查询不及格的课程
select student.* , course.cname , sc.cid , sc.score
from student, sc , course
where student.sid = sc.sid and sc.cid = course.cid and sc.score < 60
order by student.sid , sc.cid

38、查询课程编号为01且课程成绩在80分以上的学生的学号和姓名；
select student.* , course.cname , sc.cid , sc.score
from student, sc , course
where student.sid = sc.sid and sc.cid = course.cid and sc.cid = ‘01’ and sc.score >= 80
order by student.sid , sc.cid

39、求每门课程的学生人数
select course.cid , course.cname , count(*) 学生人数
from course , sc
where course.cid = sc.cid
group by course.cid , course.cname
order by course.cid , course.cname

40、查询选修"张三"老师所授课程的学生中，成绩最高的学生信息及其成绩
40.1 当最高分只有一个时
select top 1 student.* , course.cname , sc.cid , sc.score
from student, sc , course , teacher
where student.sid = sc.sid and sc.cid = course.cid and course.tid = teacher.tid and teacher.tname = n’张三’
order by sc.score desc

40.2 当最高分出现多个时
select student.* , course.cname , sc.cid , sc.score
from student, sc , course , teacher
where student.sid = sc.sid and sc.cid = course.cid and course.tid = teacher.tid and teacher.tname = n’张三’ and
sc.score = (select max(sc.score) from sc , course , teacher where sc.cid = course.cid and course.tid = teacher.tid and teacher.tname = n’张三’)

41、查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩
方法1
select m.* from sc m ,(select cid , score from sc group by cid , score having count(1) > 1) n
where m.cid= n.cid and m.score = n.score order by m.cid , m.score , m.sid

方法2
select m.* from sc m where exists (select 1 from (select cid , score from sc group by cid , score having count(1) > 1) n
where m.cid= n.cid and m.score = n.score) order by m.cid , m.score , m.sid

42、查询每门功成绩最好的前两名
select t.* from sc t where score in (select top 2 score from sc where cid = t.cid order by score desc) order by t.cid , t.score desc

43、统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列
select course.cid , course.cname , count() 学生人数
from course , sc
where course.cid = sc.cid
group by course.cid , course.cname
having count() >= 5
order by 学生人数 desc , course.cid

44、检索至少选修两门课程的学生学号
select student.sid , student.sname
from student , sc
where student.sid = sc.sid
group by student.sid , student.sname
having count(1) >= 2
order by student.sid

45、查询选修了全部课程的学生信息
方法1 根据数量来完成
select student.* from student where sid in
(select sid from sc group by sid having count(1) = (select count(1) from course))

方法2 使用双重否定来完成
select t.* from student t where t.sid not in
(
select distinct m.sid from
(
select sid , cid from student , course
) m where not exists (select 1 from sc n where n.sid = m.sid and n.cid = m.cid)
)

方法3 使用双重否定来完成
select t.* from student t where not exists(select 1 from
(
select distinct m.sid from
(
select sid , cid from student , course
) m where not exists (select 1 from sc n where n.sid = m.sid and n.cid = m.cid)
) k where k.sid = t.sid
)

46、查询各学生的年龄
46.1 只按照年份来算
select * , datediff(yy , sage , getdate()) 年龄 from student

46.2 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一
select * , case when right(convert(varchar(10),getdate(),120),5) < right(convert(varchar(10),sage,120),5) then datediff(yy , sage , getdate()) - 1 else datediff(yy , sage , getdate()) end 年龄 from student

47、查询本周过生日的学生
select * from student where datediff(week,datename(yy,getdate()) + right(convert(varchar(10),sage,120),6),getdate()) = 0

48、查询下周过生日的学生
select * from student where datediff(week,datename(yy,getdate()) + right(convert(varchar(10),sage,120),6),getdate()) = -1

49、查询本月过生日的学生
select * from student where datediff(mm,datename(yy,getdate()) + right(convert(varchar(10),sage,120),6),getdate()) = 0

50、查询下月过生日的学生
select * from student where datediff(mm,datename(yy,getdate()) + right(convert(varchar(10),sage,120),6),getdate()) = -1

drop table student,course,teacher,sc

在 select 中的字段中，若包含多张表的字段，如果这里面有某张表的某个字段和另一张表的某个字段是一对多的关系，那么该select 查询出来的结果肯定是多记录的，是可以用聚合函数的

比如 select student.sid, sc.score 这里学生表的 sid 字段和分数表 sc 的 score 字段就是一对多的关系，查询出来可以用聚合函数
